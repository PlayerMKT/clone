#!/usr/bin/env python3
"""
Drive Uploader - Backend FastAPI
Serve arquivos est√°ticos e fornece endpoints para callback OAuth2 se necess√°rio
"""

import os
from pathlib import Path
from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# === CONFIGURA√á√ïES ===
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID", "1060201687476-0c6m7fb4ttsmg84uibe6jh8utbmplr11.apps.googleusercontent.com")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET", "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")
CODESPACE_NAME = os.getenv("CODESPACE_NAME", "")
PORT = int(os.getenv("PORT", "8080"))
SECRET_KEY = os.getenv("SECRET_KEY", "sua-chave-secreta-super-segura-aqui")

print("üöÄ Iniciando Drive Uploader Server...")
print(f"üìã Client ID: {GOOGLE_CLIENT_ID[:20]}...")
print(f"üîê Secret configurado: {bool(GOOGLE_CLIENT_SECRET)}")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Drive Uploader API",
    description="Backend para aplica√ß√£o de upload ao Google Drive",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# === CONFIGURAR CORS ===
origins = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:3000",
    "http://127.0.0.1:3000"
]

# Adicionar URL do Codespaces se dispon√≠vel
if CODESPACE_NAME:
    codespace_url = f"https://{CODESPACE_NAME}-8080.app.github.dev"
    origins.append(codespace_url)
    print(f"üåê Codespace URL: {codespace_url}")
else:
    print("üíª Executando localmente")

# URL espec√≠fica do usu√°rio
user_codespace = "https://glowing-computing-machine-4jg6wwrp9qjphq5pq.github.dev"
origins.append(user_codespace)
print(f"üéØ URL do usu√°rio: {user_codespace}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

print(f"üîí CORS configurado para: {', '.join(origins)}")

# === VERIFICAR ESTRUTURA DE PASTAS ===
current_dir = Path(__file__).parent
frontend_path = current_dir.parent / "frontend"

if not frontend_path.exists():
    print(f"‚ö†Ô∏è Pasta frontend n√£o encontrada: {frontend_path}")
    # Criar pasta frontend se n√£o existir
    frontend_path.mkdir(exist_ok=True)
    print(f"üìÅ Pasta frontend criada: {frontend_path}")
else:
    print(f"üìÇ Frontend encontrado: {frontend_path}")

# === ROTAS DA API ===

@app.get("/api/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de"""
    return {
        "status": "ok",
        "message": "Drive Uploader API funcionando!",
        "version": "1.0.0",
        "client_id_configured": bool(GOOGLE_CLIENT_ID),
        "frontend_path": str(frontend_path),
        "codespace": CODESPACE_NAME or "local"
    }

@app.get("/api/config")
async def get_config():
    """Retorna configura√ß√µes p√∫blicas (sem secrets)"""
    return {
        "client_id": GOOGLE_CLIENT_ID,
        "redirect_uris": origins,
        "scopes": [
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/userinfo.profile"
        ]
    }

@app.get("/api/oauth/callback")
async def oauth_callback(request: Request):
    """Callback OAuth2 (se necess√°rio no futuro)"""
    # Por enquanto, apenas redireciona para a p√°gina principal
    # Implementa√ß√£o futura pode processar c√≥digos de autoriza√ß√£o aqui
    return RedirectResponse(url="/")

# === ROTA RAIZ ===
@app.get("/")
async def root():
    """Redireciona para o frontend"""
    return RedirectResponse(url="/index.html")

# === MONTAR ARQUIVOS EST√ÅTICOS ===
try:
    app.mount("/", StaticFiles(directory=str(frontend_path), html=True), name="frontend")
    print(f"üìÅ Arquivos est√°ticos montados: {frontend_path}")
except Exception as e:
    print(f"‚ùå Erro ao montar arquivos est√°ticos: {e}")

    # Criar arquivo index.html b√°sico se n√£o existir
    index_file = frontend_path / "index.html"
    if not index_file.exists():
        basic_html = """<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drive Uploader - Configura√ß√£o Necess√°ria</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 40px; text-align: center; }
        .error { color: #ea4335; background: #fce8e6; padding: 20px; border-radius: 8px; }
    </style>
</head>
<body>
    <div class="error">
        <h1>üöß Configura√ß√£o Necess√°ria</h1>
        <p>Os arquivos do frontend n√£o foram encontrados.</p>
        <p>Certifique-se de que a pasta 'frontend' existe com os arquivos corretos.</p>
        <hr>
        <p><strong>API Status:</strong> Funcionando ‚úÖ</p>
        <p><strong>Client ID:</strong> Configurado """ + ('‚úÖ' if GOOGLE_CLIENT_ID else '‚ùå') + """</p>
        <p><strong>Modo:</strong> """ + (CODESPACE_NAME or "Local") + """</p>
    </div>
</body>
</html>"""

        index_file.write_text(basic_html, encoding='utf-8')
        print(f"üìù Arquivo index.html b√°sico criado")

# === EVENTO DE INICIALIZA√á√ÉO ===
@app.on_event("startup")
async def startup_event():
    print("=" * 50)
    print("üöÄ DRIVE UPLOADER - SERVIDOR INICIADO!")
    print("=" * 50)
    print(f"üìä Porta: {PORT}")
    print(f"üìÅ Frontend: {frontend_path}")
    print(f"üîë Client ID: {GOOGLE_CLIENT_ID[:30]}...")
    print(f"üåê URLs permitidas: {len(origins)} configuradas")

    if CODESPACE_NAME:
        print(f"‚òÅÔ∏è Codespace: {user_codespace}")
        print(f"‚ö†Ô∏è IMPORTANTE: Torne a porta {PORT} P√öBLICA no Codespaces!")
    else:
        print(f"üíª Local: http://localhost:{PORT}")

    print("=" * 50)
    print("üìñ Documenta√ß√£o da API: /api/docs")
    print("üîç Health Check: /api/health")
    print("‚öôÔ∏è Configura√ß√£o: /api/config")
    print("=" * 50)

# === MAIN ===
if __name__ == "__main__":
    print(f"üåê Iniciando servidor na porta {PORT}...")
    print(f"üîó Acesse: http://localhost:{PORT}")

    if CODESPACE_NAME:
        print(f"‚òÅÔ∏è Codespace: {user_codespace}")

    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=PORT,
        reload=True,
        log_level="info"
    )
