import os
import httpx
from fastapi import FastAPI, Request
from starlette.responses import RedirectResponse, JSONResponse
from starlette.middleware.sessions import SessionMiddleware
from authlib.integrations.starlette_client import OAuth
from dotenv import load_dotenv

# Carrega vari√°veis do .env
load_dotenv()

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
CODESPACE_NAME = os.getenv("CODESPACE_NAME")
PORT = os.getenv("PORT", "8080")
SECRET_KEY = os.getenv("SECRET_KEY", "sua-chave-secreta")

REDIRECT_PATH = "/auth/callback"
REDIRECT_URI = f"https://{CODESPACE_NAME}-{PORT}.app.github.dev{REDIRECT_PATH}"
SCOPES = (
    "openid email profile "
    "https://www.googleapis.com/auth/drive "
    "https://www.googleapis.com/auth/calendar "
    "https://www.googleapis.com/auth/gmail.readonly"
)

app = FastAPI()
app.add_middleware(SessionMiddleware, secret_key=SECRET_KEY)

CONF_URL = "https://accounts.google.com/.well-known/openid-configuration"
oauth = OAuth()
oauth.register(
    name="google",
    client_id=GOOGLE_CLIENT_ID,
    client_secret=GOOGLE_CLIENT_SECRET,
    server_metadata_url=CONF_URL,
    client_kwargs={
        "scope": SCOPES,
        "access_type": "offline",
        "prompt": "consent"
    },
    redirect_uri=REDIRECT_URI
)

@app.get("/")
def home(request: Request):
    user = request.session.get("user")
    if user:
        return JSONResponse({"msg": "Conectado!", "user": user})
    return RedirectResponse("/login")

@app.get("/login")
async def login(request: Request):
    return await oauth.google.authorize_redirect(request, REDIRECT_URI)

@app.get(REDIRECT_PATH)
async def auth_callback(request: Request):
    token = await oauth.google.authorize_access_token(request)
    user = await oauth.google.parse_id_token(request, token)
    request.session.update({"user": user, "token": token})
    return RedirectResponse(url="/")

@app.get("/me")
def me(request: Request):
    user = request.session.get("user")
    return JSONResponse(user) if user else RedirectResponse("/login")

@app.get("/google/drive")
async def drive_files(request: Request):
    token = request.session.get("token")
    if not token:
        return RedirectResponse("/login")
    headers = {"Authorization": f"Bearer {token['access_token']}"}
    url = "https://www.googleapis.com/drive/v3/files"
    async with httpx.AsyncClient() as client:
        res = await client.get(url, headers=headers)
        return res.json()

@app.get("/google/calendar")
async def calendar_events(request: Request):
    token = request.session.get("token")
    if not token:
        return RedirectResponse("/login")
    headers = {"Authorization": f"Bearer {token['access_token']}"}
    url = "https://www.googleapis.com/calendar/v3/calendars/primary/events"
    async with httpx.AsyncClient() as client:
        res = await client.get(url, headers=headers)
        return res.json()

@app.get("/refresh")
async def refresh_token(request: Request):
    token = request.session.get("token")
    if not token or "refresh_token" not in token:
        return JSONResponse({"error": "Refresh token ausente."})
    new_token = await oauth.google.refresh_token(
        url="https://oauth2.googleapis.com/token",
        refresh_token=token["refresh_token"]
    )
    request.session["token"] = new_token
    return JSONResponse({"refreshed": True, "token": new_token})

@app.get("/logout")
def logout(request: Request):
    request.session.clear()
    return RedirectResponse("/")
